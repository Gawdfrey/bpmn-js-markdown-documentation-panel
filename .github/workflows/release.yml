name: Release

on:
  push:
    branches: [main]
    paths:
      - "packages/**"
      - "package.json"
      - "pnpm-lock.yaml"
  # Uncomment for manual releases
  # workflow_dispatch:
  #   inputs:
  #     version:
  #       description: 'Release version (major, minor, patch, or specific version)'
  #       required: true
  #       default: 'patch'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.package-version.outputs.version }}
      has-changes: ${{ steps.check-changes.outputs.has-changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ github.token }}

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          registry-url: "https://registry.npmjs.org"

      - name: Build and test packages
        uses: ./.github/actions/build-and-test

      - name: Get package version
        id: package-version
        run: |
          version=$(node -p "require('./packages/bpmn-js-markdown-documentation-panel/package.json').version")
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "📦 Package version: $version"

      - name: Check for changes since last release
        id: check-changes
        run: |
          # Check if there are any changes in packages/ since last tag
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            last_tag=$(git describe --tags --abbrev=0)
            echo "Last tag: $last_tag"
            
            if git diff --quiet $last_tag..HEAD -- packages/; then
              echo "has-changes=false" >> $GITHUB_OUTPUT
              echo "⏭️ No changes since last release"
            else
              echo "has-changes=true" >> $GITHUB_OUTPUT
              echo "📝 Changes detected since last release"
            fi
          else
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "📝 No previous tags found, treating as first release"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: packages/bpmn-js-markdown-documentation-panel/dist
          retention-days: 30

  # TODO: Uncomment when ready to publish
  # publish-npm:
  #   runs-on: ubuntu-latest
  #   needs: build-and-test
  #   if: needs.build-and-test.outputs.has-changes == 'true'
  #   steps:
  #     - name: Setup environment
  #       uses: ./.github/actions/setup
  #       with:
  #         registry-url: 'https://registry.npmjs.org'
  #
  #     - name: Build packages
  #       uses: ./.github/actions/build-and-test
  #       with:
  #         skip-quality-checks: 'true'  # Already validated in build-and-test job
  #
  #     - name: Publish to npm
  #       run: |
  #         cd packages/bpmn-js-markdown-documentation-panel
  #         npm publish
  #       env:
  #         NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  #
  #     - name: Create git tag
  #       run: |
  #         git config user.name "github-actions[bot]"
  #         git config user.email "github-actions[bot]@users.noreply.github.com"
  #         git tag -a "v${{ needs.build-and-test.outputs.version }}" -m "Release v${{ needs.build-and-test.outputs.version }}"
  #         git push origin "v${{ needs.build-and-test.outputs.version }}"

  # TODO: Uncomment when ready to create GitHub releases
  # create-github-release:
  #   runs-on: ubuntu-latest
  #   needs: build-and-test
  #   if: needs.build-and-test.outputs.has-changes == 'true'
  #   steps:
  #     - name: Setup environment
  #       uses: ./.github/actions/setup
  #       with:
  #         fetch-depth: 0
  #
  #     - name: Generate release notes
  #       id: release-notes
  #       run: |
  #         # Generate release notes from git commits since last tag
  #         echo "## 🚀 Release v${{ needs.build-and-test.outputs.version }}" > release-notes.md
  #         echo "" >> release-notes.md
  #
  #         if git describe --tags --abbrev=0 >/dev/null 2>&1; then
  #           last_tag=$(git describe --tags --abbrev=0)
  #           echo "### 📝 Changes since $last_tag" >> release-notes.md
  #           git log --pretty=format:"- %s" $last_tag..HEAD -- packages/ >> release-notes.md
  #         else
  #           echo "### 📝 Initial Release" >> release-notes.md
  #           echo "- Initial release of the BPMN Documentation Panel" >> release-notes.md
  #         fi
  #
  #         echo "" >> release-notes.md
  #         echo "### 📦 Installation" >> release-notes.md
  #         echo "- **npm:** \`npm install bpmn-js-markdown-documentation-panel\`" >> release-notes.md
  #         echo "- **Camunda Modeler:** Copy \`dist/\` files to your plugins folder" >> release-notes.md
  #
  #     - name: Download build artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: build-artifacts
  #         path: ./dist
  #
  #     - name: Create GitHub Release
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         tag_name: v${{ needs.build-and-test.outputs.version }}
  #         name: Release v${{ needs.build-and-test.outputs.version }}
  #         body_path: ./release-notes.md
  #         files: |
  #           ./dist/*
  #         draft: false
  #         prerelease: false
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  summary:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: always()
    steps:
      - name: Release Summary
        run: |
          echo "## 🚀 Release Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.build-and-test.outputs.has-changes }}" == "true" ]; then
            echo "📦 **Version**: v${{ needs.build-and-test.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "✅ **Build & Test**: ${{ needs.build-and-test.result }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
            echo "- [ ] Review build artifacts" >> $GITHUB_STEP_SUMMARY
            echo "- [ ] Enable npm publishing (uncomment publish-npm job)" >> $GITHUB_STEP_SUMMARY
            echo "- [ ] Enable GitHub releases (uncomment create-github-release job)" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **Status**: No changes detected since last release" >> $GITHUB_STEP_SUMMARY
            echo "🏗️ **Build**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi
